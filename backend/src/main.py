import os
import sys
# DON'T CHANGE THIS !!!
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from flask import Flask, send_from_directory, jsonify
from flask_cors import CORS
from src.config.cors import configure_cors
from src.models.video_project import db
from src.routes.user import user_bp
from src.routes.video import video_bp

app = Flask(__name__, static_folder=os.path.join(os.path.dirname(__file__), 'static'))

# CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
# CORS configured in cors.py
configure_cors(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'asdf#FGSgvasgf$5$WGT')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Database configuration —Å fallback
database_url = os.getenv('DATABASE_URL')
database_connected = False

if database_url:
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_strings = [
            # Pooler connection (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π)
            database_url.replace('postgresql://', 'postgresql+psycopg://'),
            # Direct connection
            database_url.replace('db.vahgmyuowsilbxqdjjii.supabase.co:5432', 'aws-0-eu-central-1.pooler.supabase.com:6543'),
            # Fallback to original
            database_url
        ]
        
        for i, conn_str in enumerate(connection_strings):
            try:
                print(f"üîÑ Trying database connection {i+1}/3: {conn_str.split('@')[1] if '@' in conn_str else 'unknown'}")
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Flask app –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
                test_app = Flask(__name__)
                test_app.config['SQLALCHEMY_DATABASE_URI'] = conn_str
                test_app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                from flask_sqlalchemy import SQLAlchemy
                test_db = SQLAlchemy()
                test_db.init_app(test_app)
                
                with test_app.app_context():
                    test_db.create_all()
                    print("‚úÖ Database connected successfully")
                    
                    # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    app.config['SQLALCHEMY_DATABASE_URI'] = conn_str
                    database_connected = True
                    break
                    
            except Exception as e:
                print(f"‚ùå Database connection failed: {str(e)[:100]}...")
                continue
                
    except Exception as e:
        print(f"‚ùå Database configuration error: {e}")

# Fallback –∫ SQLite –µ—Å–ª–∏ PostgreSQL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
if not database_connected:
    print("üîÑ Using SQLite fallback database")
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///fallback.db'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
db.init_app(app)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
with app.app_context():
    try:
        db.create_all()
        print("‚úÖ Database tables created")
    except Exception as e:
        print(f"‚ùå Database table creation failed: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase Storage (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
supabase_url = os.getenv('SUPABASE_URL')
supabase_key = os.getenv('SUPABASE_ANON_KEY')
storage_available = False

if supabase_url and supabase_key:
    try:
        from src.services.storage_service import init_storage_service
        init_storage_service(supabase_url, supabase_key)
        storage_available = True
        print("‚úÖ Supabase Storage initialized")
    except Exception as e:
        print(f"‚ö†Ô∏è Supabase Storage initialization failed: {e}")
else:
    print("‚ö†Ô∏è Supabase credentials not found. Storage service disabled.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Queue Manager (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
redis_url = os.getenv('REDIS_URL')
queue_manager = None
queue_available = False

if redis_url and redis_url.strip():
    try:
        from src.services.queue_service import init_queue_manager
        queue_manager = init_queue_manager(redis_url)
        queue_available = True
        print("‚úÖ Redis Queue initialized")
    except Exception as e:
        print(f"‚ö†Ô∏è Redis Queue initialization failed: {e}")
else:
    print("‚ö†Ô∏è Redis URL not provided. Queue service disabled.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è blueprints
app.register_blueprint(user_bp, url_prefix='/api')
app.register_blueprint(video_bp, url_prefix='/api/video')

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    queue_info = queue_manager.get_queue_info() if queue_manager else {'available': False}
    
    return jsonify({
        'success': True,
        'status': 'healthy',
        'service': 'agentflow-video-editor',
        'version': '1.0.0',
        'features': {
            'database': database_connected,
            'storage': storage_available,
            'queue': queue_available,
            'cors': True
        },
        'database_type': 'PostgreSQL' if database_connected and database_url else 'SQLite',
        'queue_info': queue_info
    })

@app.route('/api/queue/status', methods=['GET'])
def queue_status():
    """Queue status endpoint"""
    if not queue_manager:
        return jsonify({
            'success': False,
            'error': 'Queue manager not initialized',
            'fallback': 'Using synchronous processing'
        }), 200  # –ù–µ 503, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    return jsonify({
        'success': True,
        'queue_info': queue_manager.get_queue_info()
    })

@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve(path):
    """Serve static files (React frontend)"""
    static_folder_path = app.static_folder
    if static_folder_path is None:
        return jsonify({
            'message': 'AgentFlow Video Editor Backend',
            'status': 'running',
            'api_docs': '/api/health',
            'features': {
                'database': database_connected,
                'storage': storage_available,
                'queue': queue_available
            }
        })

    if path != "" and os.path.exists(os.path.join(static_folder_path, path)):
        return send_from_directory(static_folder_path, path)
    else:
        index_path = os.path.join(static_folder_path, 'index.html')
        if os.path.exists(index_path):
            return send_from_directory(static_folder_path, 'index.html')
        else:
            return jsonify({
                'message': 'AgentFlow Video Editor Backend',
                'status': 'running',
                'api_docs': '/api/health',
                'features': {
                    'database': database_connected,
                    'storage': storage_available,
                    'queue': queue_available
                }
            })

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    debug = os.getenv('FLASK_ENV') == 'development'
    
    print(f"üöÄ Starting AgentFlow Video Editor Backend on port {port}")
    print(f"üîß Debug mode: {debug}")
    print(f"üóÑÔ∏è Database: {'PostgreSQL' if database_connected and database_url else 'SQLite (fallback)'}")
    print(f"üì¶ Storage: {'Supabase' if storage_available else 'Disabled'}")
    print(f"üîÑ Queue: {'Redis' if queue_available else 'Disabled (sync processing)'}")
    
    app.run(host='0.0.0.0', port=port, debug=debug)

