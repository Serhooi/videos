#!/usr/bin/env python3
"""
Redis Queue Worker –¥–ª—è AgentFlow Video Editor
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
"""

import os
import sys
import redis
from rq import Worker, Queue, Connection
from flask import Flask

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from src.models.video_project import db
from src.services.storage_service import init_storage_service
from src.workers.video_processor import processor

# –°–æ–∑–¥–∞–µ–º Flask app –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ë–î
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
database_url = os.getenv('DATABASE_URL')
if database_url:
    app.config['SQLALCHEMY_DATABASE_URI'] = database_url
else:
    app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{os.path.join(os.path.dirname(__file__), '..', 'database', 'app.db')}"

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db.init_app(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase Storage
supabase_url = os.getenv('SUPABASE_URL')
supabase_key = os.getenv('SUPABASE_ANON_KEY')

if supabase_url and supabase_key:
    init_storage_service(supabase_url, supabase_key)
    print("‚úÖ Supabase Storage initialized")

# Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
redis_url = os.getenv('REDIS_URL', 'redis://localhost:6379')
redis_conn = redis.from_url(redis_url)

# –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥–∏
video_queue = Queue('video_processing', connection=redis_conn)
render_queue = Queue('video_rendering', connection=redis_conn)

def process_video_job(project_id: str):
    """Job —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
    with app.app_context():
        return processor.process_uploaded_video(project_id)

def render_video_job(render_id: str):
    """Job —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤–∏–¥–µ–æ"""
    with app.app_context():
        return processor.render_video(render_id)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º job —Ñ—É–Ω–∫—Ü–∏–∏
video_queue.enqueue_call = lambda func, args=(), kwargs={}, **options: video_queue.enqueue(func, *args, **kwargs, **options)
render_queue.enqueue_call = lambda func, args=(), kwargs={}, **options: render_queue.enqueue(func, *args, **kwargs, **options)

def start_worker():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç RQ worker"""
    print("üöÄ Starting AgentFlow Video Editor Worker")
    print(f"üîß Redis URL: {redis_url}")
    print(f"üóÑÔ∏è Database: {'PostgreSQL' if database_url else 'SQLite'}")
    print(f"üì¶ Storage: {'Supabase' if supabase_url else 'Disabled'}")
    
    # –°–æ–∑–¥–∞–µ–º worker –¥–ª—è –æ–±–µ–∏—Ö –æ—á–µ—Ä–µ–¥–µ–π
    worker = Worker([video_queue, render_queue], connection=redis_conn)
    
    print("üë∑ Worker started, waiting for jobs...")
    worker.work()

if __name__ == '__main__':
    start_worker()

